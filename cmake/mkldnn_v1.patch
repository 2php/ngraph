diff --git a/cmake/OpenMP.cmake b/cmake/OpenMP.cmake
index 99970659..032dadc6 100644
--- a/cmake/OpenMP.cmake
+++ b/cmake/OpenMP.cmake
@@ -28,7 +28,7 @@ if (APPLE AND CMAKE_CXX_COMPILER_ID STREQUAL "Clang")
     # But we still want to build the library.
     set(_omp_severity "WARNING")
 else()
-    set(_omp_severity "FATAL_ERROR")
+    set(_omp_severity "WARNING")
 endif()

 macro(forbid_link_compiler_omp_rt)
@@ -45,6 +45,44 @@ macro(forbid_link_compiler_omp_rt)
     endif()
 endmacro()

+macro(use_intel_omp_rt)
+    # fast return
+    if (CMAKE_CXX_COMPILER_ID STREQUAL "Intel")
+        set(MKLDNN_USES_INTEL_OPENMP TRUE)
+        message("fast return")
+        return()
+    endif()
+
+    # Do not link with compiler-native OpenMP library if Intel MKL is present.
+    # Rationale: Intel MKL comes with Intel OpenMP library which is compatible
+    # with all libraries shipped with compilers that Intel MKL-DNN supports.
+    get_filename_component(MKLIOMP5LIB "${MKLIOMP5LIB}" PATH)
+    find_library(IOMP5LIB
+                NAMES "iomp5" "iomp5md" "libiomp5" "libiomp5md"
+#                HINTS  ${MKLIOMP5LIB} )
+                HINTS "../../../mkl/src/ext_mkl/lib")
+    if(IOMP5LIB)
+        message("found libiomp")
+        forbid_link_compiler_omp_rt()
+        if (WIN32)
+            get_filename_component(MKLIOMP5DLL "${MKLIOMP5DLL}" PATH)
+            find_file(IOMP5DLL
+                NAMES "libiomp5.dll" "libiomp5md.dll"
+ #               HINTS ${MKLIOMP5DLL})
+            HINTS "../../../mkl/src/ext_mkl/lib")
+        endif()
+        list(APPEND EXTRA_SHARED_LIBS ${IOMP5LIB})
+    else()
+        if (MKLDNN_THREADING STREQUAL "OMP:INTEL")
+            message(${_omp_severity} "Intel OpenMP runtime could not be found. "
+                "Please either use OpenMP runtime that comes with the compiler "
+                "(via -DMKLDNN_THREADING={OMP,OMP:COMP}), or "
+                "explicitely provide the path to libiomp with the "
+                "-DCMAKE_LIBRARY_PATH option")
+        endif()
+    endif()
+endmacro()
+
 if(WIN32 AND ${CMAKE_CXX_COMPILER_ID} STREQUAL MSVC)
     add_definitions(/Qpar)
     add_definitions(/openmp)
@@ -56,6 +94,7 @@ elseif(MSVC AND CMAKE_CXX_COMPILER_ID STREQUAL "Clang")
     list(APPEND EXTRA_SHARED_LIBS ${IOMP5LIB})
 else()
     find_package(OpenMP)
+    message("find package")
     #newer version for findOpenMP (>= v. 3.9)
     if(CMAKE_VERSION VERSION_LESS "3.9" AND OPENMP_FOUND)
         if(${CMAKE_MAJOR_VERSION} VERSION_LESS "3" AND ${CMAKE_CXX_COMPILER_ID} STREQUAL "Intel")
@@ -71,6 +110,7 @@ endif()

 if (MKLDNN_CPU_RUNTIME MATCHES "OMP")
     if (OpenMP_CXX_FOUND)
+        message("found openmp_cxx")
         set(MKLDNN_CPU_RUNTIME_CURRENT "OMP")
         append(CMAKE_TEST_CCXX_FLAGS "${OpenMP_CXX_FLAGS}")
         append(CMAKE_EXAMPLE_CCXX_FLAGS "${OpenMP_CXX_FLAGS}")
@@ -78,6 +118,7 @@ if (MKLDNN_CPU_RUNTIME MATCHES "OMP")
         message(${_omp_severity} "OpenMP library could not be found. "
             "Proceeding might lead to highly sub-optimal performance.")
     endif()
+    use_intel_omp_rt()
 else()
     # Compilation happens with OpenMP to enable `#pragma omp simd`
     # but during linkage OpenMP dependency should be avoided
diff --git a/src/CMakeLists.txt b/src/CMakeLists.txt
index 60bb0c94..cc3fc9d6 100644
--- a/src/CMakeLists.txt
+++ b/src/CMakeLists.txt
@@ -73,8 +73,10 @@ endif()
 add_library(${LIB_NAME}
     ${MKLDNN_LIBRARY_TYPE} ${HEADERS} ${${LIB_NAME}_SUB_OBJS})

-set_property(TARGET ${LIB_NAME} PROPERTY VERSION "${PROJECT_VERSION}.0")
-set_property(TARGET ${LIB_NAME} PROPERTY SOVERSION "0")
+if(MKLDNN_LIB_VERSIONING_ENABLE)
+       set_property(TARGET ${LIB_NAME} PROPERTY VERSION "${PROJECT_VERSION}.0")
+       set_property(TARGET ${LIB_NAME} PROPERTY SOVERSION "0")
+endif()
 set_property(TARGET ${LIB_NAME} PROPERTY PUBLIC_HEADER ${HEADERS})

 target_include_directories(${LIB_NAME} PUBLIC
